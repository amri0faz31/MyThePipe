name: CI Pipeline

on:
  push:
    branches: [ '*' ]
  pull_request:
    branches: [ 'main' ]

jobs:
  # JOB 1: Backend .NET Unit Tests
  run-backend-tests:
    runs-on: ubuntu-latest
    # This sets the working directory for all steps in this job
    defaults:
      run:
        working-directory: ./backpipe/VetApi

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore --configuration Release

      - name: Run Unit Tests
        run: dotnet test ../../VetApi.UnitTests/ --no-build --configuration Release --verbosity normal

  # JOB 2: Frontend Build & Test
  run-frontend-build:
    runs-on: ubuntu-latest
    # This job will run even if the backend job fails (we want to see all errors)
    # You can change this to `needs: run-backend-tests` to run sequentially instead.
    # if: always()
    defaults:
      run:
        working-directory: ./frontend # Sets the context to the frontend folder

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        # This action finds the version from your package.json 'engines' field or uses a default
        uses: actions/setup-node@v4
        with:
          node-version-file: './frontend/package.json' # Point to your frontend package.json
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: Install NPM dependencies
        run: npm ci # Uses the exact versions from package-lock.json for reproducible builds

      - name: Run Linter
        run: npm run lint --if-present # The --if-present flag prevents failure if no lint script exists

      - name: Run Build
        run: npm run build --if-present # This is the most critical step. If this fails, the pipeline fails.

      - name: Run Tests
        run: npm test --if-present -- --watchAll=false # --watchAll=false is crucial for CI environments
        env:
          CI: true # This flag makes test output simpler and prevents interactive mode
